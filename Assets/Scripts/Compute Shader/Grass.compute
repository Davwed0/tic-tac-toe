#pragma kernel CalculateGrassPositions

// Inputs
RWStructuredBuffer<float3> Positions; // Output positions
float3 TerrainSize; // Size of the terrain
float NoiseScale; // Noise scale for Perlin noise
float Threshold; // Noise threshold for filtering
float CellSize; // Grid cell size
float2 Offset; // Grid offset
int NumRows; // Number of rows
int NumCols; // Number of columns

// Random function for small offsets
float rand(float2 co)
{
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}

// Custom Perlin noise implementation
float2 hash(float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

[numthreads(8, 8, 1)]
void CalculateGrassPositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumCols || id.y >= NumRows)
        return;

    // Calculate local position with small random offset
    float localX = (id.x * CellSize) + Offset.x + rand(float2(id.x, id.y)) * CellSize * 0.1f;
    float localZ = (id.y * CellSize) + Offset.y + rand(float2(id.x, id.y)) * CellSize * 0.1f;

    // Skip if outside terrain boundaries
    if (localX < 0 || localX > TerrainSize.x || localZ < 0 || localZ > TerrainSize.z)
        return;

    // Convert to world position
    float3 worldPos = float3(localX, 0, localZ);

    Positions[id.y * NumCols + id.x] = worldPos;
}